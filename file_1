#include <iostream>

#include <limits.h>

#define G 5

using namespace std;

/* module minimumKey */

int minimumKey(int myKey[], bool myMSTset[])

{

/* variables */

int mini = INT_MAX, mini_index;

for (int n = 0; n < G; n++)

if (myMSTset[n] == false && myKey[n] < mini)

mini = myKey[n], mini_index = n;

/* returns the minimum index */

return mini_index;

}

/* method to display MST */

int displayMST(int parents[], int n, int mygraph[G][G])

{

cout<<"Edge"<<"\t"<<"Weight"<<endl;

for (int i = 1; i < G; i++)

/* output */

cout<<parents[i]<<" - "<<i<<"\t"<<mygraph[i][parents[i]]<<endl;

return 0;

}

/* modified module prim2 */

void prim2(int mygraph[G][G])

{

/* variables needed */

int parents[G];

int myKey[G];   

bool myMSTset[G];

for (int i = 0; i < G; i++)

myKey[i] = INT_MAX, myMSTset[i] = false;

myKey[0] = 0;

parents[0] = -1;

for (int counter = 0; counter < G-1; counter++)

{

int s = minimumKey(myKey, myMSTset);

myMSTset[s] = true;

for (int n = 0; n < G; n++)

if (mygraph[s][n] && myMSTset[n] == false && mygraph[s][n] < myKey[n])

parents[n] = s, myKey[n] = mygraph[s][n];

}

/* calling the display function */

displayMST(parents, G, mygraph);

}

int main()

{

/* the graph

3 4

(0)--(1)--(2)

| / \ |

7| 9/ \6 |8

| / \ |

(3)-------(4)

9 */

/* mygraph */

int mygraph[G][G] = {

{0, 3, 0, 7, 0},

{3, 0, 4, 9, 6},

{0, 4, 0, 0, 8},

{7, 9, 0, 0, 9},

{0, 6, 8, 9, 0},

};

/* function call to prim2 */

prim2(mygraph);

getchar();

return 0;

}
